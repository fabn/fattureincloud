=begin
#Documentazione API e ambiente di test

#<p> <p> <u>ATTENZIONE: Il progetto attualmente è ancora in fase di sviluppo e verrà arricchito man mano con altre funzioni. Per eventuali segnalazioni riguardanti malfunzionamenti o suggerimenti contattare l'assistenza di Fatture In Cloud. Si raccomanda inoltre di controllare periodicamente il CHANGELOG delle utime modifiche effettuate.</u> </p> <p>Il modello attuale prevede una richiesta di tipo POST, con i parametri codificati in formato JSON nel corpo della richiesta stessa. I formati dei parametri sono elencati nella tabella sottostante e variano a seconda della tipologia.</p> <h4>Formato dei parametri:</h4> <p> <table class=\"fullwidth\"> <thead><tr><th><b>Tipo</b></th><th>Descrizione</th><th>Esempio</th></tr></thead> <tbody class=\"operation-status\"> <tr><td><b>string</b></td><td>Stringa</td><td>\"stringa\"</td></tr> <tr><td><b>integer</b></td><td>Numero intero</td><td>\"123\" o 123</td></tr> <tr><td><b>double</b></td><td>Numero decimale</td><td>\"123.45\" o 123.45</td></tr> <tr><td><b>boolean</b></td><td>Variabile booleana</td><td>\"true\", true, \"false\" o false</td></tr> <tr><td><b>date</b></td><td>Data nel formato dd/MM/yyyy</td><td>\"01/01/2015\"</td></tr> <tr><td><b>date-time</b></td><td>Data nel formato dd/MM/yyyy HH:mm:ss</td><td>\"01/01/2015 12:34:53\"</td></tr> </tbody> </table> </p> <p> I parametri <code>api_uid</code> e <code>api_key</code> sono necessari per effettuare qualsiasi operazione (vedi la <a href=\"https://secure.fattureincloud.it/api\" target=\"_blank\">pagina principale delle API</a>) e vanno inseriti come parametri JSON in tutte le richieste. </p> <p> L'endpoint di riferimento si trova all'indirizzo <a href=\"#\">https://api.fattureincloud.it/v1</a>, per cui le richieste sono nel formato <a href=\"#\">https://api.fattureincloud.it/v1/richiesta/operazione</a>. </p> <p> L'esempio di richiesta generica contiene una lista dei codici di errore comuni a tutte le richieste, mentre eventuali altri errori specifici ad una funzione sono elencati nella sezione della funzione stessa. </p>  </p>

OpenAPI spec version: 0.9.14

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module FattureInCloud
  class DocumentiEmessiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Dettagli documento
    # Restituisce i dettagli del documento richiesto.
    # @param tipo_doc Tipologia del documento
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [DocDettagliResponse]
    def doc_dettagli(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_dettagli_with_http_info(tipo_doc, body, opts)
      data
    end

    # Dettagli documento
    # Restituisce i dettagli del documento richiesto.
    # @param tipo_doc Tipologia del documento
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocDettagliResponse, Fixnum, Hash)>] DocDettagliResponse data, response status code and response headers
    def doc_dettagli_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_dettagli ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_dettagli"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_dettagli"
      end
      # resource path
      local_var_path = '/{tipo-doc}/dettagli'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocDettagliResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_dettagli\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Elimina documento
    # Elimina definitivamente un documento.
    # @param tipo_doc Tipologia del documento
    # @param body Corpo richiesta
    # @param [Hash] opts the optional parameters
    # @return [GenericSuccessResponse]
    def doc_elimina(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_elimina_with_http_info(tipo_doc, body, opts)
      data
    end

    # Elimina documento
    # Elimina definitivamente un documento.
    # @param tipo_doc Tipologia del documento
    # @param body Corpo richiesta
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericSuccessResponse, Fixnum, Hash)>] GenericSuccessResponse data, response status code and response headers
    def doc_elimina_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_elimina ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_elimina"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_elimina"
      end
      # resource path
      local_var_path = '/{tipo-doc}/elimina'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericSuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_elimina\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Informazioni e dati predefiniti
    # Restituisce informazioni utili alla creazione e alla modifica di un documento, tra cui le impostazioni predefinite e le numerazioni utilizzate.
    # @param tipo_doc Tipologia del documento
    # @param body Parametri necessari per ottenere le informazioni
    # @param [Hash] opts the optional parameters
    # @return [DocInfoResponse]
    def doc_info(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_info_with_http_info(tipo_doc, body, opts)
      data
    end

    # Informazioni e dati predefiniti
    # Restituisce informazioni utili alla creazione e alla modifica di un documento, tra cui le impostazioni predefinite e le numerazioni utilizzate.
    # @param tipo_doc Tipologia del documento
    # @param body Parametri necessari per ottenere le informazioni
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocInfoResponse, Fixnum, Hash)>] DocInfoResponse data, response status code and response headers
    def doc_info_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_info ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_info"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_info"
      end
      # resource path
      local_var_path = '/{tipo-doc}/info'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocInfoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Informazioni invio tramite e-mail
    # Restituisce informazioni predefinite e/o utili per l'invio tramite e-mail del documento.
    # @param tipo_doc Tipologia del documento
    # @param body Parametri necessari per ottenere le informazioni
    # @param [Hash] opts the optional parameters
    # @return [DocInfomailResponse]
    def doc_infomail(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_infomail_with_http_info(tipo_doc, body, opts)
      data
    end

    # Informazioni invio tramite e-mail
    # Restituisce informazioni predefinite e/o utili per l&#39;invio tramite e-mail del documento.
    # @param tipo_doc Tipologia del documento
    # @param body Parametri necessari per ottenere le informazioni
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocInfomailResponse, Fixnum, Hash)>] DocInfomailResponse data, response status code and response headers
    def doc_infomail_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_infomail ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_infomail"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_infomail"
      end
      # resource path
      local_var_path = '/{tipo-doc}/infomail'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocInfomailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_infomail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invio documento tramite e-mail
    # Effettua l'invio del documento tramite e-mail. Vedi anche  la funzione /infomail per maggiori informazioni.
    # @param tipo_doc Tipologia del documento
    # @param body Parametri necessari per l&#39;invio
    # @param [Hash] opts the optional parameters
    # @return [GenericSuccessResponse]
    def doc_inviamail(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_inviamail_with_http_info(tipo_doc, body, opts)
      data
    end

    # Invio documento tramite e-mail
    # Effettua l&#39;invio del documento tramite e-mail. Vedi anche  la funzione /infomail per maggiori informazioni.
    # @param tipo_doc Tipologia del documento
    # @param body Parametri necessari per l&#39;invio
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericSuccessResponse, Fixnum, Hash)>] GenericSuccessResponse data, response status code and response headers
    def doc_inviamail_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_inviamail ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_inviamail"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_inviamail"
      end
      # resource path
      local_var_path = '/{tipo-doc}/inviamail'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericSuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_inviamail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Elenco documenti
    # Restituisce la lista delle fatture o dei documenti richiesti per l'anno di competenza specificato. I risultati possono essere filtrati (vedi modello richiesta) e vengono organizzati in pagine per evitare risposte troppo pesanti (attualmente 250 risultati per pagina).
    # @param tipo_doc Tipologia di documenti da cercare
    # @param body Filtri per la ricerca dei documenti
    # @param [Hash] opts the optional parameters
    # @return [DocListaResponse]
    def doc_lista(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_lista_with_http_info(tipo_doc, body, opts)
      data
    end

    # Elenco documenti
    # Restituisce la lista delle fatture o dei documenti richiesti per l&#39;anno di competenza specificato. I risultati possono essere filtrati (vedi modello richiesta) e vengono organizzati in pagine per evitare risposte troppo pesanti (attualmente 250 risultati per pagina).
    # @param tipo_doc Tipologia di documenti da cercare
    # @param body Filtri per la ricerca dei documenti
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocListaResponse, Fixnum, Hash)>] DocListaResponse data, response status code and response headers
    def doc_lista_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_lista ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_lista"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_lista"
      end
      # resource path
      local_var_path = '/{tipo-doc}/lista'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocListaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_lista\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifica documento
    # Modifica un documento esistente. In caso di parametri non specificati il corrispondente valore già presente rimane invariato.
    # @param tipo_doc Tipologia del documento
    # @param body Corpo richiesta
    # @param [Hash] opts the optional parameters
    # @return [GenericSuccessResponse]
    def doc_modifica(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_modifica_with_http_info(tipo_doc, body, opts)
      data
    end

    # Modifica documento
    # Modifica un documento esistente. In caso di parametri non specificati il corrispondente valore già presente rimane invariato.
    # @param tipo_doc Tipologia del documento
    # @param body Corpo richiesta
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericSuccessResponse, Fixnum, Hash)>] GenericSuccessResponse data, response status code and response headers
    def doc_modifica_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_modifica ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_modifica"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_modifica"
      end
      # resource path
      local_var_path = '/{tipo-doc}/modifica'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericSuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_modifica\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Nuovo documento
    # Crea un nuovo documento. In caso di parametri non specificati vengono assunti quelli predefiniti.
    # @param tipo_doc Tipologia del documento
    # @param body Corpo richiesta
    # @param [Hash] opts the optional parameters
    # @return [DocNuovoResponse]
    def doc_nuovo(tipo_doc, body, opts = {})
      data, _status_code, _headers = doc_nuovo_with_http_info(tipo_doc, body, opts)
      data
    end

    # Nuovo documento
    # Crea un nuovo documento. In caso di parametri non specificati vengono assunti quelli predefiniti.
    # @param tipo_doc Tipologia del documento
    # @param body Corpo richiesta
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocNuovoResponse, Fixnum, Hash)>] DocNuovoResponse data, response status code and response headers
    def doc_nuovo_with_http_info(tipo_doc, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentiEmessiApi.doc_nuovo ...'
      end
      # verify the required parameter 'tipo_doc' is set
      if @api_client.config.client_side_validation && tipo_doc.nil?
        fail ArgumentError, "Missing the required parameter 'tipo_doc' when calling DocumentiEmessiApi.doc_nuovo"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fatture', 'proforma', 'ordini', 'preventivi', 'ndc', 'ricevute', 'ddt', 'rapporti', 'ordforn'].include?(tipo_doc)
        fail ArgumentError, "invalid value for 'tipo_doc', must be one of fatture, proforma, ordini, preventivi, ndc, ricevute, ddt, rapporti, ordforn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentiEmessiApi.doc_nuovo"
      end
      # resource path
      local_var_path = '/{tipo-doc}/nuovo'.sub('{' + 'tipo-doc' + '}', tipo_doc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocNuovoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentiEmessiApi#doc_nuovo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
