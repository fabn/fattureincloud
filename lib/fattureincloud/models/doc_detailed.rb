=begin
#Documentazione API e ambiente di test

#<p> <p> <u>ATTENZIONE: Il progetto attualmente è ancora in fase di sviluppo e verrà arricchito man mano con altre funzioni. Per eventuali segnalazioni riguardanti malfunzionamenti o suggerimenti contattare l'assistenza di Fatture In Cloud. Si raccomanda inoltre di controllare periodicamente il CHANGELOG delle utime modifiche effettuate.</u> </p> <p>Il modello attuale prevede una richiesta di tipo POST, con i parametri codificati in formato JSON nel corpo della richiesta stessa. I formati dei parametri sono elencati nella tabella sottostante e variano a seconda della tipologia.</p> <h4>Formato dei parametri:</h4> <p> <table class=\"fullwidth\"> <thead><tr><th><b>Tipo</b></th><th>Descrizione</th><th>Esempio</th></tr></thead> <tbody class=\"operation-status\"> <tr><td><b>string</b></td><td>Stringa</td><td>\"stringa\"</td></tr> <tr><td><b>integer</b></td><td>Numero intero</td><td>\"123\" o 123</td></tr> <tr><td><b>double</b></td><td>Numero decimale</td><td>\"123.45\" o 123.45</td></tr> <tr><td><b>boolean</b></td><td>Variabile booleana</td><td>\"true\", true, \"false\" o false</td></tr> <tr><td><b>date</b></td><td>Data nel formato dd/MM/yyyy</td><td>\"01/01/2015\"</td></tr> <tr><td><b>date-time</b></td><td>Data nel formato dd/MM/yyyy HH:mm:ss</td><td>\"01/01/2015 12:34:53\"</td></tr> </tbody> </table> </p> <p> I parametri <code>api_uid</code> e <code>api_key</code> sono necessari per effettuare qualsiasi operazione (vedi la <a href=\"https://secure.fattureincloud.it/api\" target=\"_blank\">pagina principale delle API</a>) e vanno inseriti come parametri JSON in tutte le richieste. </p> <p> L'endpoint di riferimento si trova all'indirizzo <a href=\"#\">https://api.fattureincloud.it/v1</a>, per cui le richieste sono nel formato <a href=\"#\">https://api.fattureincloud.it/v1/richiesta/operazione</a>. </p> <p> L'esempio di richiesta generica contiene una lista dei codici di errore comuni a tutte le richieste, mentre eventuali altri errori specifici ad una funzione sono elencati nella sezione della funzione stessa. </p>  </p>

OpenAPI spec version: 0.9.14

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module FattureInCloud
  class DocDetailed
    # Identificativo univoco del documento
    attr_accessor :id

    # Identificativo permanente del documento (rimane lo stesso anche a seguito di modiifche)
    attr_accessor :token

    # Tipologia del documento
    attr_accessor :tipo

    # Identificativo univoco del cliente (se nullo, il cliente non è presente nell'anagrafica) [solo con tipo!=\"ordforn\"]
    attr_accessor :id_cliente

    # Identificativo univoco del fornitore (se nullo, il fornitore non è presente nell'anagrafica) [solo con tipo=\"ordforn\"]
    attr_accessor :id_fornitore

    # Nome o ragione sociale del cliente/fornitore
    attr_accessor :nome

    # Indirizzo del cliente
    attr_accessor :indirizzo_via

    # CAP del cliente/fornitore
    attr_accessor :indirizzo_cap

    # Città (comune) del cliente/fornitore
    attr_accessor :indirizzo_citta

    # Provincia del cliente/fornitore
    attr_accessor :indirizzo_provincia

    # Note extra sull'indirizzo
    attr_accessor :indirizzo_extra

    # Paese (nazionalità) del cliente/fornitore
    attr_accessor :paese

    # Lingua del documento (sigla)
    attr_accessor :lingua

    # Partita IVA cliente/fornitore
    attr_accessor :piva

    # Codice fiscale cliente/fornitore
    attr_accessor :cf

    # Numero (e serie) del documento
    attr_accessor :numero

    # Valuta del documento e degli importi indicati
    attr_accessor :valuta

    # Tasso di cambio EUR/{valuta}
    attr_accessor :valuta_cambio

    # Specifica se i prezzi da utilizzare per il calcolo del totale sono quelli netti, oppure quello lordi, comprensivi di iva
    attr_accessor :prezzi_ivati

    # Importo netto del documento (competenze)
    attr_accessor :importo_netto

    # Importo dell'IVA del documento
    attr_accessor :importo_iva

    # Importo lordo del documento (totale da pagare)
    attr_accessor :importo_totale

    # [Non presente in ddt e ordforn] Percentuale rivalsa INPS
    attr_accessor :rivalsa

    # [Non presente in ddt e ordforn] Importo rivalsa INPS
    attr_accessor :importo_rivalsa

    # [Non presente in ddt e ordforn] Percentuale cassa previdenziale
    attr_accessor :cassa

    # [Non presente in ddt e ordforn] Importo cassa previdenziale
    attr_accessor :importo_cassa

    # [Non presente in ddt e ordforn] Percentuale ritenuta d'acconto
    attr_accessor :rit_acconto

    # [Non presente in ddt e ordforn] Imponibile della ritenuta d'acconto (percentuale sul totale)
    attr_accessor :imponibile_ritenuta

    # [Non presente in ddt e ordforn] Importo ritenuta d'acconto
    attr_accessor :importo_rit_acconto

    # [Non presente in ddt e ordforn] Percentuale altra ritenuta (ritenuta previdenziale, Enasarco etc.)
    attr_accessor :rit_altra

    # [Non presente in ddt e ordforn] Importo altra ritenuta (ritenuta previdenziale, Enasarco etc.)
    attr_accessor :importo_rit_altra

    # [Non presente in ddt e ordforn] Valore della marca da bollo (0 se non presente)
    attr_accessor :marca_bollo

    # [Non presente in ddt] Oggetto mostrato sul documento (precedentemente \"oggetto_fattura\")
    attr_accessor :oggetto_visibile

    # [Non presente in ddt] Oggetto (per organizzazione interna)
    attr_accessor :oggetto_interno

    # [Non presente in ddt e ordforn] Centro ricavo
    attr_accessor :centro_ricavo

    # [Solo in ordforn] Centro di costo
    attr_accessor :centro_costo

    # [Non presente in ddt] Note (in formato HTML)
    attr_accessor :note

    # [Non presente in ddt] Nasconde o mostra la scadenza sul documento
    attr_accessor :nascondi_scadenza

    # [Non presente in ndc e ordforn] Indica la presenza di un DDT incluso nel documento (per i ddt è sempre true)
    attr_accessor :ddt

    # [Solo se tipo=fatture] Indica la presenza di una fattura accompagnatoria inclusa nel documento
    attr_accessor :ftacc

    # [Solo se tipo!=ddt] Identificativo del template del documento
    attr_accessor :id_template

    # [Solo se ddt=true] Identificativo del template del ddt
    attr_accessor :ddt_id_template

    # [Solo se ftacc=true] Identificativo del template della fattura accompagnatoria
    attr_accessor :ftacc_id_template

    # [Non presente in ddt e ndc] Mostra o meno le informazioni sul metodo di pagamento sul documento
    attr_accessor :mostra_info_pagamento

    # [Solo se mostra_info_pagamento=true] Nome del metodo di pagamento
    attr_accessor :metodo_pagamento

    # [Solo se mostra_info_pagamento=true] Titolo della riga N del metodo di pagamento (N da 1 a 5)
    attr_accessor :metodo_titolo_n

    # [Solo se mostra_info_pagamento=true] Descrizione della riga N del metodo di pagamento (N da 1 a 5)
    attr_accessor :metodo_desc_n

    # [Solo per preventivi, rapporti e ordforn] Nasconde o mostra la scadenza sul documento
    attr_accessor :mostra_totali

    # [Solo per ricevute, fatture, proforma, ordini] Mostra il bottone \"Paga con Paypal\"
    attr_accessor :mostra_bottone_paypal

    # [Solo per ricevute, fatture, proforma, ordini] Mostra il bottone \"Paga con Bonifico Immediato\"
    attr_accessor :mostra_bottone_bonifico

    # [Solo per ricevute, fatture, proforma, ordini] Mostra il bottone \"Notifica pagamento effettuato\"
    attr_accessor :mostra_bottone_notifica

    # Lista degli articoli/righe del documento
    attr_accessor :lista_articoli

    # [Non presente in preventivi, ddt e ordforn] Lista delle tranches di pagamento
    attr_accessor :lista_pagamenti

    # [Se ddt=true] Numero del ddt (se tipo=\"ddt\" corrisponde al campo \"numero\")
    attr_accessor :ddt_numero

    # [Se ddt/ftacc=true] Numero di colli specificato nel ddt
    attr_accessor :ddt_colli

    # [Se ddt/ftacc=true] Peso specificato nel ddt
    attr_accessor :ddt_peso

    # [Se ddt/ftacc=true] Causale specificata nel ddt
    attr_accessor :ddt_causale

    # [Se ddt/ftacc=true] Luogo di spedizione specificato nel ddt
    attr_accessor :ddt_luogo

    # [Se ddt/ftacc=true] Dati trasportatore specificati nel ddt
    attr_accessor :ddt_trasportatore

    # [Se ddt/ftacc=true] Annotazioni specificate nel ddt
    attr_accessor :ddt_annotazioni

    # [Solo se tipo!=ddt] Link al documento in formato PDF
    attr_accessor :link_doc

    # [Solo se ddt=true] Link al ddt in formato PDF
    attr_accessor :link_ddt

    # [Solo se ftacc=true] Link alla fattura accompagnatoria in formato PDF
    attr_accessor :link_ftacc

    # [Solo se è presente un allegato] Link al file allegato
    attr_accessor :link_allegato

    # Indica se il documento è bloccato (e di conseguenza non può essere modificato o eliminato)
    attr_accessor :bloccato

    # [Solo per fatture e ndc elettroniche, vale sempre \"true\"] Indica che il documento è nel formato FatturaPA
    attr_accessor :pa

    # [Solo se PA=true] Indica la tipologia del cliente: Pubblica Amministrazione (\"PA\") oppure privato (\"B2B\")
    attr_accessor :pa_tipo_cliente

    # [Solo se PA=true] Tipo di documento a cui fa seguito la fattura/ndc in questione
    attr_accessor :pa_tipo

    # [Solo se PA=true] Numero del documento a cui fa seguito la fattura/ndc in questione
    attr_accessor :pa_numero

    # [Solo se PA=true] Codice Unitario Progetto
    attr_accessor :pa_cup

    # [Solo se PA=true] Codice Identificativo della Gara
    attr_accessor :pa_cig

    # [Solo se PA=true] Codice Ufficio della Pubblica Amministrazione
    attr_accessor :pa_codice

    # [Solo se PA=true] Esigibilità IVA e modalità di versamento (I=immediata, D=differita, S=split payment, N=non specificata)
    attr_accessor :pa_esigibilita

    # [Solo se PA=true] Modalità di pagamento (vedi tabella codifiche sulla documentazione ufficiale)
    attr_accessor :pa_modalita_pagamento

    # [Solo se PA=true] Nome dell'istituto di credito
    attr_accessor :pa_istituto_credito

    # [Solo se PA=true] Codice IBAN del conto corrente del beneficiario
    attr_accessor :pa_iban

    # [Solo se PA=true] Beneficiario del pagamento
    attr_accessor :pa_beneficiario

    # [Solo se PA=true] Indica che la fattura/ndc elettronica è stata inviata tramite il servizio FEPA TeamSystem
    attr_accessor :pa_ts

    # [Solo se PA_ts=true] Stato di invio della fattura/ndc
    attr_accessor :pa_ts_stato

    # [Solo per fatture, ndc e proforma NON elettroniche, vale sempre \"true\"] Indica che il documento applica lo split payment
    attr_accessor :split_payment

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'token' => :'token',
        :'tipo' => :'tipo',
        :'id_cliente' => :'id_cliente',
        :'id_fornitore' => :'id_fornitore',
        :'nome' => :'nome',
        :'indirizzo_via' => :'indirizzo_via',
        :'indirizzo_cap' => :'indirizzo_cap',
        :'indirizzo_citta' => :'indirizzo_citta',
        :'indirizzo_provincia' => :'indirizzo_provincia',
        :'indirizzo_extra' => :'indirizzo_extra',
        :'paese' => :'paese',
        :'lingua' => :'lingua',
        :'piva' => :'piva',
        :'cf' => :'cf',
        :'numero' => :'numero',
        :'valuta' => :'valuta',
        :'valuta_cambio' => :'valuta_cambio',
        :'prezzi_ivati' => :'prezzi_ivati',
        :'importo_netto' => :'importo_netto',
        :'importo_iva' => :'importo_iva',
        :'importo_totale' => :'importo_totale',
        :'rivalsa' => :'rivalsa',
        :'importo_rivalsa' => :'importo_rivalsa',
        :'cassa' => :'cassa',
        :'importo_cassa' => :'importo_cassa',
        :'rit_acconto' => :'rit_acconto',
        :'imponibile_ritenuta' => :'imponibile_ritenuta',
        :'importo_rit_acconto' => :'importo_rit_acconto',
        :'rit_altra' => :'rit_altra',
        :'importo_rit_altra' => :'importo_rit_altra',
        :'marca_bollo' => :'marca_bollo',
        :'oggetto_visibile' => :'oggetto_visibile',
        :'oggetto_interno' => :'oggetto_interno',
        :'centro_ricavo' => :'centro_ricavo',
        :'centro_costo' => :'centro_costo',
        :'note' => :'note',
        :'nascondi_scadenza' => :'nascondi_scadenza',
        :'ddt' => :'ddt',
        :'ftacc' => :'ftacc',
        :'id_template' => :'id_template',
        :'ddt_id_template' => :'ddt_id_template',
        :'ftacc_id_template' => :'ftacc_id_template',
        :'mostra_info_pagamento' => :'mostra_info_pagamento',
        :'metodo_pagamento' => :'metodo_pagamento',
        :'metodo_titolo_n' => :'metodo_titoloN',
        :'metodo_desc_n' => :'metodo_descN',
        :'mostra_totali' => :'mostra_totali',
        :'mostra_bottone_paypal' => :'mostra_bottone_paypal',
        :'mostra_bottone_bonifico' => :'mostra_bottone_bonifico',
        :'mostra_bottone_notifica' => :'mostra_bottone_notifica',
        :'lista_articoli' => :'lista_articoli',
        :'lista_pagamenti' => :'lista_pagamenti',
        :'ddt_numero' => :'ddt_numero',
        :'ddt_colli' => :'ddt_colli',
        :'ddt_peso' => :'ddt_peso',
        :'ddt_causale' => :'ddt_causale',
        :'ddt_luogo' => :'ddt_luogo',
        :'ddt_trasportatore' => :'ddt_trasportatore',
        :'ddt_annotazioni' => :'ddt_annotazioni',
        :'link_doc' => :'link_doc',
        :'link_ddt' => :'link_ddt',
        :'link_ftacc' => :'link_ftacc',
        :'link_allegato' => :'link_allegato',
        :'bloccato' => :'bloccato',
        :'pa' => :'PA',
        :'pa_tipo_cliente' => :'PA_tipo_cliente',
        :'pa_tipo' => :'PA_tipo',
        :'pa_numero' => :'PA_numero',
        :'pa_cup' => :'PA_cup',
        :'pa_cig' => :'PA_cig',
        :'pa_codice' => :'PA_codice',
        :'pa_esigibilita' => :'PA_esigibilita',
        :'pa_modalita_pagamento' => :'PA_modalita_pagamento',
        :'pa_istituto_credito' => :'PA_istituto_credito',
        :'pa_iban' => :'PA_iban',
        :'pa_beneficiario' => :'PA_beneficiario',
        :'pa_ts' => :'PA_ts',
        :'pa_ts_stato' => :'PA_ts_stato',
        :'split_payment' => :'split_payment'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'token' => :'String',
        :'tipo' => :'String',
        :'id_cliente' => :'String',
        :'id_fornitore' => :'String',
        :'nome' => :'String',
        :'indirizzo_via' => :'String',
        :'indirizzo_cap' => :'String',
        :'indirizzo_citta' => :'String',
        :'indirizzo_provincia' => :'String',
        :'indirizzo_extra' => :'String',
        :'paese' => :'String',
        :'lingua' => :'String',
        :'piva' => :'String',
        :'cf' => :'String',
        :'numero' => :'String',
        :'valuta' => :'String',
        :'valuta_cambio' => :'Float',
        :'prezzi_ivati' => :'BOOLEAN',
        :'importo_netto' => :'Float',
        :'importo_iva' => :'Float',
        :'importo_totale' => :'Float',
        :'rivalsa' => :'Float',
        :'importo_rivalsa' => :'Float',
        :'cassa' => :'Float',
        :'importo_cassa' => :'Float',
        :'rit_acconto' => :'Float',
        :'imponibile_ritenuta' => :'Float',
        :'importo_rit_acconto' => :'Float',
        :'rit_altra' => :'Float',
        :'importo_rit_altra' => :'Float',
        :'marca_bollo' => :'Float',
        :'oggetto_visibile' => :'String',
        :'oggetto_interno' => :'String',
        :'centro_ricavo' => :'String',
        :'centro_costo' => :'String',
        :'note' => :'String',
        :'nascondi_scadenza' => :'BOOLEAN',
        :'ddt' => :'BOOLEAN',
        :'ftacc' => :'BOOLEAN',
        :'id_template' => :'String',
        :'ddt_id_template' => :'String',
        :'ftacc_id_template' => :'String',
        :'mostra_info_pagamento' => :'BOOLEAN',
        :'metodo_pagamento' => :'String',
        :'metodo_titolo_n' => :'String',
        :'metodo_desc_n' => :'String',
        :'mostra_totali' => :'String',
        :'mostra_bottone_paypal' => :'BOOLEAN',
        :'mostra_bottone_bonifico' => :'BOOLEAN',
        :'mostra_bottone_notifica' => :'BOOLEAN',
        :'lista_articoli' => :'Array<DocArticolo>',
        :'lista_pagamenti' => :'Array<DocPagamento>',
        :'ddt_numero' => :'String',
        :'ddt_colli' => :'String',
        :'ddt_peso' => :'String',
        :'ddt_causale' => :'String',
        :'ddt_luogo' => :'String',
        :'ddt_trasportatore' => :'String',
        :'ddt_annotazioni' => :'String',
        :'link_doc' => :'String',
        :'link_ddt' => :'String',
        :'link_ftacc' => :'String',
        :'link_allegato' => :'String',
        :'bloccato' => :'BOOLEAN',
        :'pa' => :'BOOLEAN',
        :'pa_tipo_cliente' => :'String',
        :'pa_tipo' => :'String',
        :'pa_numero' => :'String',
        :'pa_cup' => :'String',
        :'pa_cig' => :'String',
        :'pa_codice' => :'String',
        :'pa_esigibilita' => :'String',
        :'pa_modalita_pagamento' => :'String',
        :'pa_istituto_credito' => :'String',
        :'pa_iban' => :'String',
        :'pa_beneficiario' => :'String',
        :'pa_ts' => :'BOOLEAN',
        :'pa_ts_stato' => :'String',
        :'split_payment' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = '0'
      end

      if attributes.has_key?(:'token')
        self.token = attributes[:'token']
      else
        self.token = '1234567890abcdefghijklmnopqrstuv'
      end

      if attributes.has_key?(:'tipo')
        self.tipo = attributes[:'tipo']
      else
        self.tipo = 'fatture'
      end

      if attributes.has_key?(:'id_cliente')
        self.id_cliente = attributes[:'id_cliente']
      else
        self.id_cliente = '0'
      end

      if attributes.has_key?(:'id_fornitore')
        self.id_fornitore = attributes[:'id_fornitore']
      else
        self.id_fornitore = '0'
      end

      if attributes.has_key?(:'nome')
        self.nome = attributes[:'nome']
      else
        self.nome = 'Mario Rossi'
      end

      if attributes.has_key?(:'indirizzo_via')
        self.indirizzo_via = attributes[:'indirizzo_via']
      else
        self.indirizzo_via = 'Via delle Betulle, 123'
      end

      if attributes.has_key?(:'indirizzo_cap')
        self.indirizzo_cap = attributes[:'indirizzo_cap']
      else
        self.indirizzo_cap = '21012'
      end

      if attributes.has_key?(:'indirizzo_citta')
        self.indirizzo_citta = attributes[:'indirizzo_citta']
      else
        self.indirizzo_citta = 'Curno'
      end

      if attributes.has_key?(:'indirizzo_provincia')
        self.indirizzo_provincia = attributes[:'indirizzo_provincia']
      else
        self.indirizzo_provincia = 'BG'
      end

      if attributes.has_key?(:'indirizzo_extra')
        self.indirizzo_extra = attributes[:'indirizzo_extra']
      else
        self.indirizzo_extra = ''
      end

      if attributes.has_key?(:'paese')
        self.paese = attributes[:'paese']
      else
        self.paese = 'Italia'
      end

      if attributes.has_key?(:'lingua')
        self.lingua = attributes[:'lingua']
      else
        self.lingua = 'it'
      end

      if attributes.has_key?(:'piva')
        self.piva = attributes[:'piva']
      else
        self.piva = 'IT1234567890'
      end

      if attributes.has_key?(:'cf')
        self.cf = attributes[:'cf']
      else
        self.cf = 'ABCDEF12G34H567I'
      end

      if attributes.has_key?(:'numero')
        self.numero = attributes[:'numero']
      else
        self.numero = '1a'
      end

      if attributes.has_key?(:'valuta')
        self.valuta = attributes[:'valuta']
      else
        self.valuta = 'EUR'
      end

      if attributes.has_key?(:'valuta_cambio')
        self.valuta_cambio = attributes[:'valuta_cambio']
      else
        self.valuta_cambio = 1.0
      end

      if attributes.has_key?(:'prezzi_ivati')
        self.prezzi_ivati = attributes[:'prezzi_ivati']
      else
        self.prezzi_ivati = false
      end

      if attributes.has_key?(:'importo_netto')
        self.importo_netto = attributes[:'importo_netto']
      else
        self.importo_netto = 0.0
      end

      if attributes.has_key?(:'importo_iva')
        self.importo_iva = attributes[:'importo_iva']
      else
        self.importo_iva = 0.0
      end

      if attributes.has_key?(:'importo_totale')
        self.importo_totale = attributes[:'importo_totale']
      else
        self.importo_totale = 0.0
      end

      if attributes.has_key?(:'rivalsa')
        self.rivalsa = attributes[:'rivalsa']
      else
        self.rivalsa = 0.0
      end

      if attributes.has_key?(:'importo_rivalsa')
        self.importo_rivalsa = attributes[:'importo_rivalsa']
      else
        self.importo_rivalsa = 0.0
      end

      if attributes.has_key?(:'cassa')
        self.cassa = attributes[:'cassa']
      else
        self.cassa = 0.0
      end

      if attributes.has_key?(:'importo_cassa')
        self.importo_cassa = attributes[:'importo_cassa']
      else
        self.importo_cassa = 0.0
      end

      if attributes.has_key?(:'rit_acconto')
        self.rit_acconto = attributes[:'rit_acconto']
      else
        self.rit_acconto = 0.0
      end

      if attributes.has_key?(:'imponibile_ritenuta')
        self.imponibile_ritenuta = attributes[:'imponibile_ritenuta']
      else
        self.imponibile_ritenuta = 0.0
      end

      if attributes.has_key?(:'importo_rit_acconto')
        self.importo_rit_acconto = attributes[:'importo_rit_acconto']
      else
        self.importo_rit_acconto = 0.0
      end

      if attributes.has_key?(:'rit_altra')
        self.rit_altra = attributes[:'rit_altra']
      else
        self.rit_altra = 0.0
      end

      if attributes.has_key?(:'importo_rit_altra')
        self.importo_rit_altra = attributes[:'importo_rit_altra']
      else
        self.importo_rit_altra = 0.0
      end

      if attributes.has_key?(:'marca_bollo')
        self.marca_bollo = attributes[:'marca_bollo']
      else
        self.marca_bollo = 0.0
      end

      if attributes.has_key?(:'oggetto_visibile')
        self.oggetto_visibile = attributes[:'oggetto_visibile']
      else
        self.oggetto_visibile = ''
      end

      if attributes.has_key?(:'oggetto_interno')
        self.oggetto_interno = attributes[:'oggetto_interno']
      else
        self.oggetto_interno = ''
      end

      if attributes.has_key?(:'centro_ricavo')
        self.centro_ricavo = attributes[:'centro_ricavo']
      else
        self.centro_ricavo = ''
      end

      if attributes.has_key?(:'centro_costo')
        self.centro_costo = attributes[:'centro_costo']
      else
        self.centro_costo = ''
      end

      if attributes.has_key?(:'note')
        self.note = attributes[:'note']
      else
        self.note = ''
      end

      if attributes.has_key?(:'nascondi_scadenza')
        self.nascondi_scadenza = attributes[:'nascondi_scadenza']
      else
        self.nascondi_scadenza = false
      end

      if attributes.has_key?(:'ddt')
        self.ddt = attributes[:'ddt']
      else
        self.ddt = false
      end

      if attributes.has_key?(:'ftacc')
        self.ftacc = attributes[:'ftacc']
      else
        self.ftacc = false
      end

      if attributes.has_key?(:'id_template')
        self.id_template = attributes[:'id_template']
      else
        self.id_template = '0'
      end

      if attributes.has_key?(:'ddt_id_template')
        self.ddt_id_template = attributes[:'ddt_id_template']
      else
        self.ddt_id_template = '0'
      end

      if attributes.has_key?(:'ftacc_id_template')
        self.ftacc_id_template = attributes[:'ftacc_id_template']
      else
        self.ftacc_id_template = '0'
      end

      if attributes.has_key?(:'mostra_info_pagamento')
        self.mostra_info_pagamento = attributes[:'mostra_info_pagamento']
      else
        self.mostra_info_pagamento = false
      end

      if attributes.has_key?(:'metodo_pagamento')
        self.metodo_pagamento = attributes[:'metodo_pagamento']
      else
        self.metodo_pagamento = 'Bonifico'
      end

      if attributes.has_key?(:'metodo_titoloN')
        self.metodo_titolo_n = attributes[:'metodo_titoloN']
      else
        self.metodo_titolo_n = 'IBAN'
      end

      if attributes.has_key?(:'metodo_descN')
        self.metodo_desc_n = attributes[:'metodo_descN']
      else
        self.metodo_desc_n = 'IT01A2345678900000000001234'
      end

      if attributes.has_key?(:'mostra_totali')
        self.mostra_totali = attributes[:'mostra_totali']
      else
        self.mostra_totali = 'tutti'
      end

      if attributes.has_key?(:'mostra_bottone_paypal')
        self.mostra_bottone_paypal = attributes[:'mostra_bottone_paypal']
      else
        self.mostra_bottone_paypal = false
      end

      if attributes.has_key?(:'mostra_bottone_bonifico')
        self.mostra_bottone_bonifico = attributes[:'mostra_bottone_bonifico']
      else
        self.mostra_bottone_bonifico = false
      end

      if attributes.has_key?(:'mostra_bottone_notifica')
        self.mostra_bottone_notifica = attributes[:'mostra_bottone_notifica']
      else
        self.mostra_bottone_notifica = false
      end

      if attributes.has_key?(:'lista_articoli')
        if (value = attributes[:'lista_articoli']).is_a?(Array)
          self.lista_articoli = value
        end
      end

      if attributes.has_key?(:'lista_pagamenti')
        if (value = attributes[:'lista_pagamenti']).is_a?(Array)
          self.lista_pagamenti = value
        end
      end

      if attributes.has_key?(:'ddt_numero')
        self.ddt_numero = attributes[:'ddt_numero']
      else
        self.ddt_numero = ''
      end

      if attributes.has_key?(:'ddt_colli')
        self.ddt_colli = attributes[:'ddt_colli']
      else
        self.ddt_colli = ''
      end

      if attributes.has_key?(:'ddt_peso')
        self.ddt_peso = attributes[:'ddt_peso']
      else
        self.ddt_peso = ''
      end

      if attributes.has_key?(:'ddt_causale')
        self.ddt_causale = attributes[:'ddt_causale']
      else
        self.ddt_causale = ''
      end

      if attributes.has_key?(:'ddt_luogo')
        self.ddt_luogo = attributes[:'ddt_luogo']
      else
        self.ddt_luogo = ''
      end

      if attributes.has_key?(:'ddt_trasportatore')
        self.ddt_trasportatore = attributes[:'ddt_trasportatore']
      else
        self.ddt_trasportatore = ''
      end

      if attributes.has_key?(:'ddt_annotazioni')
        self.ddt_annotazioni = attributes[:'ddt_annotazioni']
      else
        self.ddt_annotazioni = ''
      end

      if attributes.has_key?(:'link_doc')
        self.link_doc = attributes[:'link_doc']
      else
        self.link_doc = ''
      end

      if attributes.has_key?(:'link_ddt')
        self.link_ddt = attributes[:'link_ddt']
      else
        self.link_ddt = ''
      end

      if attributes.has_key?(:'link_ftacc')
        self.link_ftacc = attributes[:'link_ftacc']
      else
        self.link_ftacc = ''
      end

      if attributes.has_key?(:'link_allegato')
        self.link_allegato = attributes[:'link_allegato']
      else
        self.link_allegato = ''
      end

      if attributes.has_key?(:'bloccato')
        self.bloccato = attributes[:'bloccato']
      else
        self.bloccato = true
      end

      if attributes.has_key?(:'PA')
        self.pa = attributes[:'PA']
      else
        self.pa = true
      end

      if attributes.has_key?(:'PA_tipo_cliente')
        self.pa_tipo_cliente = attributes[:'PA_tipo_cliente']
      else
        self.pa_tipo_cliente = 'PA'
      end

      if attributes.has_key?(:'PA_tipo')
        self.pa_tipo = attributes[:'PA_tipo']
      else
        self.pa_tipo = 'nessuno'
      end

      if attributes.has_key?(:'PA_numero')
        self.pa_numero = attributes[:'PA_numero']
      else
        self.pa_numero = ''
      end

      if attributes.has_key?(:'PA_cup')
        self.pa_cup = attributes[:'PA_cup']
      else
        self.pa_cup = ''
      end

      if attributes.has_key?(:'PA_cig')
        self.pa_cig = attributes[:'PA_cig']
      else
        self.pa_cig = ''
      end

      if attributes.has_key?(:'PA_codice')
        self.pa_codice = attributes[:'PA_codice']
      else
        self.pa_codice = ''
      end

      if attributes.has_key?(:'PA_esigibilita')
        self.pa_esigibilita = attributes[:'PA_esigibilita']
      else
        self.pa_esigibilita = 'N'
      end

      if attributes.has_key?(:'PA_modalita_pagamento')
        self.pa_modalita_pagamento = attributes[:'PA_modalita_pagamento']
      else
        self.pa_modalita_pagamento = 'MP01'
      end

      if attributes.has_key?(:'PA_istituto_credito')
        self.pa_istituto_credito = attributes[:'PA_istituto_credito']
      else
        self.pa_istituto_credito = ''
      end

      if attributes.has_key?(:'PA_iban')
        self.pa_iban = attributes[:'PA_iban']
      else
        self.pa_iban = ''
      end

      if attributes.has_key?(:'PA_beneficiario')
        self.pa_beneficiario = attributes[:'PA_beneficiario']
      else
        self.pa_beneficiario = ''
      end

      if attributes.has_key?(:'PA_ts')
        self.pa_ts = attributes[:'PA_ts']
      else
        self.pa_ts = true
      end

      if attributes.has_key?(:'PA_ts_stato')
        self.pa_ts_stato = attributes[:'PA_ts_stato']
      else
        self.pa_ts_stato = ''
      end

      if attributes.has_key?(:'split_payment')
        self.split_payment = attributes[:'split_payment']
      else
        self.split_payment = true
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @tipo.nil?
        invalid_properties.push('invalid value for "tipo", tipo cannot be nil.')
      end

      if @nome.nil?
        invalid_properties.push('invalid value for "nome", nome cannot be nil.')
      end

      if @indirizzo_via.nil?
        invalid_properties.push('invalid value for "indirizzo_via", indirizzo_via cannot be nil.')
      end

      if @indirizzo_cap.nil?
        invalid_properties.push('invalid value for "indirizzo_cap", indirizzo_cap cannot be nil.')
      end

      if @indirizzo_citta.nil?
        invalid_properties.push('invalid value for "indirizzo_citta", indirizzo_citta cannot be nil.')
      end

      if @indirizzo_provincia.nil?
        invalid_properties.push('invalid value for "indirizzo_provincia", indirizzo_provincia cannot be nil.')
      end

      if @paese.nil?
        invalid_properties.push('invalid value for "paese", paese cannot be nil.')
      end

      if @piva.nil?
        invalid_properties.push('invalid value for "piva", piva cannot be nil.')
      end

      if @cf.nil?
        invalid_properties.push('invalid value for "cf", cf cannot be nil.')
      end

      if @numero.nil?
        invalid_properties.push('invalid value for "numero", numero cannot be nil.')
      end

      if @valuta.nil?
        invalid_properties.push('invalid value for "valuta", valuta cannot be nil.')
      end

      if @valuta_cambio.nil?
        invalid_properties.push('invalid value for "valuta_cambio", valuta_cambio cannot be nil.')
      end

      if @prezzi_ivati.nil?
        invalid_properties.push('invalid value for "prezzi_ivati", prezzi_ivati cannot be nil.')
      end

      if @importo_netto.nil?
        invalid_properties.push('invalid value for "importo_netto", importo_netto cannot be nil.')
      end

      if @importo_iva.nil?
        invalid_properties.push('invalid value for "importo_iva", importo_iva cannot be nil.')
      end

      if @importo_totale.nil?
        invalid_properties.push('invalid value for "importo_totale", importo_totale cannot be nil.')
      end

      if @lista_articoli.nil?
        invalid_properties.push('invalid value for "lista_articoli", lista_articoli cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @token.nil?
      return false if @tipo.nil?
      tipo_validator = EnumAttributeValidator.new('String', ['fatture', 'proforma', 'ordini', 'preventivi', 'ndc'])
      return false unless tipo_validator.valid?(@tipo)
      return false if @nome.nil?
      return false if @indirizzo_via.nil?
      return false if @indirizzo_cap.nil?
      return false if @indirizzo_citta.nil?
      return false if @indirizzo_provincia.nil?
      return false if @paese.nil?
      lingua_validator = EnumAttributeValidator.new('String', ['it', 'en', 'de'])
      return false unless lingua_validator.valid?(@lingua)
      return false if @piva.nil?
      return false if @cf.nil?
      return false if @numero.nil?
      return false if @valuta.nil?
      return false if @valuta_cambio.nil?
      return false if @prezzi_ivati.nil?
      return false if @importo_netto.nil?
      return false if @importo_iva.nil?
      return false if @importo_totale.nil?
      mostra_totali_validator = EnumAttributeValidator.new('String', ['tutti', 'netto', 'nessuno'])
      return false unless mostra_totali_validator.valid?(@mostra_totali)
      return false if @lista_articoli.nil?
      pa_tipo_cliente_validator = EnumAttributeValidator.new('String', ['PA', 'B2B'])
      return false unless pa_tipo_cliente_validator.valid?(@pa_tipo_cliente)
      pa_tipo_validator = EnumAttributeValidator.new('String', ['ordine', 'convenzione', 'contratto', 'nessuno'])
      return false unless pa_tipo_validator.valid?(@pa_tipo)
      pa_esigibilita_validator = EnumAttributeValidator.new('String', ['I', 'D', 'S', 'N'])
      return false unless pa_esigibilita_validator.valid?(@pa_esigibilita)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tipo Object to be assigned
    def tipo=(tipo)
      validator = EnumAttributeValidator.new('String', ['fatture', 'proforma', 'ordini', 'preventivi', 'ndc'])
      unless validator.valid?(tipo)
        fail ArgumentError, 'invalid value for "tipo", must be one of #{validator.allowable_values}.'
      end
      @tipo = tipo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lingua Object to be assigned
    def lingua=(lingua)
      validator = EnumAttributeValidator.new('String', ['it', 'en', 'de'])
      unless validator.valid?(lingua)
        fail ArgumentError, 'invalid value for "lingua", must be one of #{validator.allowable_values}.'
      end
      @lingua = lingua
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mostra_totali Object to be assigned
    def mostra_totali=(mostra_totali)
      validator = EnumAttributeValidator.new('String', ['tutti', 'netto', 'nessuno'])
      unless validator.valid?(mostra_totali)
        fail ArgumentError, 'invalid value for "mostra_totali", must be one of #{validator.allowable_values}.'
      end
      @mostra_totali = mostra_totali
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pa_tipo_cliente Object to be assigned
    def pa_tipo_cliente=(pa_tipo_cliente)
      validator = EnumAttributeValidator.new('String', ['PA', 'B2B'])
      unless validator.valid?(pa_tipo_cliente)
        fail ArgumentError, 'invalid value for "pa_tipo_cliente", must be one of #{validator.allowable_values}.'
      end
      @pa_tipo_cliente = pa_tipo_cliente
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pa_tipo Object to be assigned
    def pa_tipo=(pa_tipo)
      validator = EnumAttributeValidator.new('String', ['ordine', 'convenzione', 'contratto', 'nessuno'])
      unless validator.valid?(pa_tipo)
        fail ArgumentError, 'invalid value for "pa_tipo", must be one of #{validator.allowable_values}.'
      end
      @pa_tipo = pa_tipo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pa_esigibilita Object to be assigned
    def pa_esigibilita=(pa_esigibilita)
      validator = EnumAttributeValidator.new('String', ['I', 'D', 'S', 'N'])
      unless validator.valid?(pa_esigibilita)
        fail ArgumentError, 'invalid value for "pa_esigibilita", must be one of #{validator.allowable_values}.'
      end
      @pa_esigibilita = pa_esigibilita
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          token == o.token &&
          tipo == o.tipo &&
          id_cliente == o.id_cliente &&
          id_fornitore == o.id_fornitore &&
          nome == o.nome &&
          indirizzo_via == o.indirizzo_via &&
          indirizzo_cap == o.indirizzo_cap &&
          indirizzo_citta == o.indirizzo_citta &&
          indirizzo_provincia == o.indirizzo_provincia &&
          indirizzo_extra == o.indirizzo_extra &&
          paese == o.paese &&
          lingua == o.lingua &&
          piva == o.piva &&
          cf == o.cf &&
          numero == o.numero &&
          valuta == o.valuta &&
          valuta_cambio == o.valuta_cambio &&
          prezzi_ivati == o.prezzi_ivati &&
          importo_netto == o.importo_netto &&
          importo_iva == o.importo_iva &&
          importo_totale == o.importo_totale &&
          rivalsa == o.rivalsa &&
          importo_rivalsa == o.importo_rivalsa &&
          cassa == o.cassa &&
          importo_cassa == o.importo_cassa &&
          rit_acconto == o.rit_acconto &&
          imponibile_ritenuta == o.imponibile_ritenuta &&
          importo_rit_acconto == o.importo_rit_acconto &&
          rit_altra == o.rit_altra &&
          importo_rit_altra == o.importo_rit_altra &&
          marca_bollo == o.marca_bollo &&
          oggetto_visibile == o.oggetto_visibile &&
          oggetto_interno == o.oggetto_interno &&
          centro_ricavo == o.centro_ricavo &&
          centro_costo == o.centro_costo &&
          note == o.note &&
          nascondi_scadenza == o.nascondi_scadenza &&
          ddt == o.ddt &&
          ftacc == o.ftacc &&
          id_template == o.id_template &&
          ddt_id_template == o.ddt_id_template &&
          ftacc_id_template == o.ftacc_id_template &&
          mostra_info_pagamento == o.mostra_info_pagamento &&
          metodo_pagamento == o.metodo_pagamento &&
          metodo_titolo_n == o.metodo_titolo_n &&
          metodo_desc_n == o.metodo_desc_n &&
          mostra_totali == o.mostra_totali &&
          mostra_bottone_paypal == o.mostra_bottone_paypal &&
          mostra_bottone_bonifico == o.mostra_bottone_bonifico &&
          mostra_bottone_notifica == o.mostra_bottone_notifica &&
          lista_articoli == o.lista_articoli &&
          lista_pagamenti == o.lista_pagamenti &&
          ddt_numero == o.ddt_numero &&
          ddt_colli == o.ddt_colli &&
          ddt_peso == o.ddt_peso &&
          ddt_causale == o.ddt_causale &&
          ddt_luogo == o.ddt_luogo &&
          ddt_trasportatore == o.ddt_trasportatore &&
          ddt_annotazioni == o.ddt_annotazioni &&
          link_doc == o.link_doc &&
          link_ddt == o.link_ddt &&
          link_ftacc == o.link_ftacc &&
          link_allegato == o.link_allegato &&
          bloccato == o.bloccato &&
          pa == o.pa &&
          pa_tipo_cliente == o.pa_tipo_cliente &&
          pa_tipo == o.pa_tipo &&
          pa_numero == o.pa_numero &&
          pa_cup == o.pa_cup &&
          pa_cig == o.pa_cig &&
          pa_codice == o.pa_codice &&
          pa_esigibilita == o.pa_esigibilita &&
          pa_modalita_pagamento == o.pa_modalita_pagamento &&
          pa_istituto_credito == o.pa_istituto_credito &&
          pa_iban == o.pa_iban &&
          pa_beneficiario == o.pa_beneficiario &&
          pa_ts == o.pa_ts &&
          pa_ts_stato == o.pa_ts_stato &&
          split_payment == o.split_payment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, token, tipo, id_cliente, id_fornitore, nome, indirizzo_via, indirizzo_cap, indirizzo_citta, indirizzo_provincia, indirizzo_extra, paese, lingua, piva, cf, numero, valuta, valuta_cambio, prezzi_ivati, importo_netto, importo_iva, importo_totale, rivalsa, importo_rivalsa, cassa, importo_cassa, rit_acconto, imponibile_ritenuta, importo_rit_acconto, rit_altra, importo_rit_altra, marca_bollo, oggetto_visibile, oggetto_interno, centro_ricavo, centro_costo, note, nascondi_scadenza, ddt, ftacc, id_template, ddt_id_template, ftacc_id_template, mostra_info_pagamento, metodo_pagamento, metodo_titolo_n, metodo_desc_n, mostra_totali, mostra_bottone_paypal, mostra_bottone_bonifico, mostra_bottone_notifica, lista_articoli, lista_pagamenti, ddt_numero, ddt_colli, ddt_peso, ddt_causale, ddt_luogo, ddt_trasportatore, ddt_annotazioni, link_doc, link_ddt, link_ftacc, link_allegato, bloccato, pa, pa_tipo_cliente, pa_tipo, pa_numero, pa_cup, pa_cig, pa_codice, pa_esigibilita, pa_modalita_pagamento, pa_istituto_credito, pa_iban, pa_beneficiario, pa_ts, pa_ts_stato, split_payment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FattureInCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
