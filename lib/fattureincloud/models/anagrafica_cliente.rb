=begin
#Documentazione API e ambiente di test

#<p> <p> <u>ATTENZIONE: Il progetto attualmente è ancora in fase di sviluppo e verrà arricchito man mano con altre funzioni. Per eventuali segnalazioni riguardanti malfunzionamenti o suggerimenti contattare l'assistenza di Fatture In Cloud. Si raccomanda inoltre di controllare periodicamente il CHANGELOG delle utime modifiche effettuate.</u> </p> <p>Il modello attuale prevede una richiesta di tipo POST, con i parametri codificati in formato JSON nel corpo della richiesta stessa. I formati dei parametri sono elencati nella tabella sottostante e variano a seconda della tipologia.</p> <h4>Formato dei parametri:</h4> <p> <table class=\"fullwidth\"> <thead><tr><th><b>Tipo</b></th><th>Descrizione</th><th>Esempio</th></tr></thead> <tbody class=\"operation-status\"> <tr><td><b>string</b></td><td>Stringa</td><td>\"stringa\"</td></tr> <tr><td><b>integer</b></td><td>Numero intero</td><td>\"123\" o 123</td></tr> <tr><td><b>double</b></td><td>Numero decimale</td><td>\"123.45\" o 123.45</td></tr> <tr><td><b>boolean</b></td><td>Variabile booleana</td><td>\"true\", true, \"false\" o false</td></tr> <tr><td><b>date</b></td><td>Data nel formato dd/MM/yyyy</td><td>\"01/01/2015\"</td></tr> <tr><td><b>date-time</b></td><td>Data nel formato dd/MM/yyyy HH:mm:ss</td><td>\"01/01/2015 12:34:53\"</td></tr> </tbody> </table> </p> <p> I parametri <code>api_uid</code> e <code>api_key</code> sono necessari per effettuare qualsiasi operazione (vedi la <a href=\"https://secure.fattureincloud.it/api\" target=\"_blank\">pagina principale delle API</a>) e vanno inseriti come parametri JSON in tutte le richieste. </p> <p> L'endpoint di riferimento si trova all'indirizzo <a href=\"#\">https://api.fattureincloud.it/v1</a>, per cui le richieste sono nel formato <a href=\"#\">https://api.fattureincloud.it/v1/richiesta/operazione</a>. </p> <p> L'esempio di richiesta generica contiene una lista dei codici di errore comuni a tutte le richieste, mentre eventuali altri errori specifici ad una funzione sono elencati nella sezione della funzione stessa. </p>  </p>

OpenAPI spec version: 0.9.14

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module FattureInCloud
  class AnagraficaCliente
    # Identificativo univoco del cliente
    attr_accessor :id

    # Nome o ragione sociale del cliente
    attr_accessor :nome

    # Nome referente
    attr_accessor :referente

    # Indirizzo del cliente
    attr_accessor :indirizzo_via

    # CAP del cliente
    attr_accessor :indirizzo_cap

    # Città (comune) del cliente
    attr_accessor :indirizzo_citta

    # Provincia del cliente
    attr_accessor :indirizzo_provincia

    # Note extra sull'indirizzo
    attr_accessor :indirizzo_extra

    # Paese (nazionalità) del cliente
    attr_accessor :paese

    # Indirizzo di posta elettronica
    attr_accessor :mail

    # Recapito telefonico
    attr_accessor :tel

    # Numero fax
    attr_accessor :fax

    # Partita IVA
    attr_accessor :piva

    # Codice fiscale
    attr_accessor :cf

    # Termini di pagamento predefiniti (giorni a partire dalla data del documento)
    attr_accessor :termini_pagamento

    # Indica se la scadenza del pagamento deve avvenire alla fine del mese (dopo i giorni specificati in 'termini_pagamento')
    attr_accessor :pagamento_fine_mese

    # Valore IVA predefinito
    attr_accessor :val_iva_default

    # Descrizione IVA
    attr_accessor :desc_iva_default

    # Informazioni extra sul cliente
    attr_accessor :extra

    # Indica se il cliente è una pubblica amministrazione
    attr_accessor :pa

    # [Solo se PA=true] Codice pubblica amministrazione
    attr_accessor :pa_codice

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'nome' => :'nome',
        :'referente' => :'referente',
        :'indirizzo_via' => :'indirizzo_via',
        :'indirizzo_cap' => :'indirizzo_cap',
        :'indirizzo_citta' => :'indirizzo_citta',
        :'indirizzo_provincia' => :'indirizzo_provincia',
        :'indirizzo_extra' => :'indirizzo_extra',
        :'paese' => :'paese',
        :'mail' => :'mail',
        :'tel' => :'tel',
        :'fax' => :'fax',
        :'piva' => :'piva',
        :'cf' => :'cf',
        :'termini_pagamento' => :'termini_pagamento',
        :'pagamento_fine_mese' => :'pagamento_fine_mese',
        :'val_iva_default' => :'val_iva_default',
        :'desc_iva_default' => :'desc_iva_default',
        :'extra' => :'extra',
        :'pa' => :'PA',
        :'pa_codice' => :'PA_codice'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'nome' => :'String',
        :'referente' => :'String',
        :'indirizzo_via' => :'String',
        :'indirizzo_cap' => :'String',
        :'indirizzo_citta' => :'String',
        :'indirizzo_provincia' => :'String',
        :'indirizzo_extra' => :'String',
        :'paese' => :'String',
        :'mail' => :'String',
        :'tel' => :'String',
        :'fax' => :'String',
        :'piva' => :'String',
        :'cf' => :'String',
        :'termini_pagamento' => :'Integer',
        :'pagamento_fine_mese' => :'BOOLEAN',
        :'val_iva_default' => :'Float',
        :'desc_iva_default' => :'String',
        :'extra' => :'String',
        :'pa' => :'BOOLEAN',
        :'pa_codice' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = '0'
      end

      if attributes.has_key?(:'nome')
        self.nome = attributes[:'nome']
      else
        self.nome = 'Mario Rossi'
      end

      if attributes.has_key?(:'referente')
        self.referente = attributes[:'referente']
      else
        self.referente = ''
      end

      if attributes.has_key?(:'indirizzo_via')
        self.indirizzo_via = attributes[:'indirizzo_via']
      else
        self.indirizzo_via = 'Via delle Betulle, 123'
      end

      if attributes.has_key?(:'indirizzo_cap')
        self.indirizzo_cap = attributes[:'indirizzo_cap']
      else
        self.indirizzo_cap = '21012'
      end

      if attributes.has_key?(:'indirizzo_citta')
        self.indirizzo_citta = attributes[:'indirizzo_citta']
      else
        self.indirizzo_citta = 'Curno'
      end

      if attributes.has_key?(:'indirizzo_provincia')
        self.indirizzo_provincia = attributes[:'indirizzo_provincia']
      else
        self.indirizzo_provincia = 'BG'
      end

      if attributes.has_key?(:'indirizzo_extra')
        self.indirizzo_extra = attributes[:'indirizzo_extra']
      else
        self.indirizzo_extra = ''
      end

      if attributes.has_key?(:'paese')
        self.paese = attributes[:'paese']
      else
        self.paese = 'Italia'
      end

      if attributes.has_key?(:'mail')
        self.mail = attributes[:'mail']
      else
        self.mail = 'info@mariorossi.it'
      end

      if attributes.has_key?(:'tel')
        self.tel = attributes[:'tel']
      else
        self.tel = '012345678'
      end

      if attributes.has_key?(:'fax')
        self.fax = attributes[:'fax']
      else
        self.fax = '012345678'
      end

      if attributes.has_key?(:'piva')
        self.piva = attributes[:'piva']
      else
        self.piva = 'IT1234567890'
      end

      if attributes.has_key?(:'cf')
        self.cf = attributes[:'cf']
      else
        self.cf = 'ABCDEF12G34H567I'
      end

      if attributes.has_key?(:'termini_pagamento')
        self.termini_pagamento = attributes[:'termini_pagamento']
      else
        self.termini_pagamento = 0
      end

      if attributes.has_key?(:'pagamento_fine_mese')
        self.pagamento_fine_mese = attributes[:'pagamento_fine_mese']
      else
        self.pagamento_fine_mese = false
      end

      if attributes.has_key?(:'val_iva_default')
        self.val_iva_default = attributes[:'val_iva_default']
      else
        self.val_iva_default = 22.0
      end

      if attributes.has_key?(:'desc_iva_default')
        self.desc_iva_default = attributes[:'desc_iva_default']
      else
        self.desc_iva_default = ''
      end

      if attributes.has_key?(:'extra')
        self.extra = attributes[:'extra']
      else
        self.extra = ''
      end

      if attributes.has_key?(:'PA')
        self.pa = attributes[:'PA']
      else
        self.pa = false
      end

      if attributes.has_key?(:'PA_codice')
        self.pa_codice = attributes[:'PA_codice']
      else
        self.pa_codice = ''
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @nome.nil?
        invalid_properties.push('invalid value for "nome", nome cannot be nil.')
      end

      if @referente.nil?
        invalid_properties.push('invalid value for "referente", referente cannot be nil.')
      end

      if @indirizzo_via.nil?
        invalid_properties.push('invalid value for "indirizzo_via", indirizzo_via cannot be nil.')
      end

      if @indirizzo_cap.nil?
        invalid_properties.push('invalid value for "indirizzo_cap", indirizzo_cap cannot be nil.')
      end

      if @indirizzo_citta.nil?
        invalid_properties.push('invalid value for "indirizzo_citta", indirizzo_citta cannot be nil.')
      end

      if @indirizzo_provincia.nil?
        invalid_properties.push('invalid value for "indirizzo_provincia", indirizzo_provincia cannot be nil.')
      end

      if @paese.nil?
        invalid_properties.push('invalid value for "paese", paese cannot be nil.')
      end

      if @mail.nil?
        invalid_properties.push('invalid value for "mail", mail cannot be nil.')
      end

      if @tel.nil?
        invalid_properties.push('invalid value for "tel", tel cannot be nil.')
      end

      if @fax.nil?
        invalid_properties.push('invalid value for "fax", fax cannot be nil.')
      end

      if @piva.nil?
        invalid_properties.push('invalid value for "piva", piva cannot be nil.')
      end

      if @cf.nil?
        invalid_properties.push('invalid value for "cf", cf cannot be nil.')
      end

      if @termini_pagamento.nil?
        invalid_properties.push('invalid value for "termini_pagamento", termini_pagamento cannot be nil.')
      end

      if @pagamento_fine_mese.nil?
        invalid_properties.push('invalid value for "pagamento_fine_mese", pagamento_fine_mese cannot be nil.')
      end

      if @val_iva_default.nil?
        invalid_properties.push('invalid value for "val_iva_default", val_iva_default cannot be nil.')
      end

      if @desc_iva_default.nil?
        invalid_properties.push('invalid value for "desc_iva_default", desc_iva_default cannot be nil.')
      end

      if @extra.nil?
        invalid_properties.push('invalid value for "extra", extra cannot be nil.')
      end

      if @pa.nil?
        invalid_properties.push('invalid value for "pa", pa cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @nome.nil?
      return false if @referente.nil?
      return false if @indirizzo_via.nil?
      return false if @indirizzo_cap.nil?
      return false if @indirizzo_citta.nil?
      return false if @indirizzo_provincia.nil?
      return false if @paese.nil?
      return false if @mail.nil?
      return false if @tel.nil?
      return false if @fax.nil?
      return false if @piva.nil?
      return false if @cf.nil?
      return false if @termini_pagamento.nil?
      return false if @pagamento_fine_mese.nil?
      return false if @val_iva_default.nil?
      return false if @desc_iva_default.nil?
      return false if @extra.nil?
      return false if @pa.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          nome == o.nome &&
          referente == o.referente &&
          indirizzo_via == o.indirizzo_via &&
          indirizzo_cap == o.indirizzo_cap &&
          indirizzo_citta == o.indirizzo_citta &&
          indirizzo_provincia == o.indirizzo_provincia &&
          indirizzo_extra == o.indirizzo_extra &&
          paese == o.paese &&
          mail == o.mail &&
          tel == o.tel &&
          fax == o.fax &&
          piva == o.piva &&
          cf == o.cf &&
          termini_pagamento == o.termini_pagamento &&
          pagamento_fine_mese == o.pagamento_fine_mese &&
          val_iva_default == o.val_iva_default &&
          desc_iva_default == o.desc_iva_default &&
          extra == o.extra &&
          pa == o.pa &&
          pa_codice == o.pa_codice
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, nome, referente, indirizzo_via, indirizzo_cap, indirizzo_citta, indirizzo_provincia, indirizzo_extra, paese, mail, tel, fax, piva, cf, termini_pagamento, pagamento_fine_mese, val_iva_default, desc_iva_default, extra, pa, pa_codice].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FattureInCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
