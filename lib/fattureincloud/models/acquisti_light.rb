=begin
#Documentazione API e ambiente di test

#<p> <p> <u>ATTENZIONE: Il progetto attualmente è ancora in fase di sviluppo e verrà arricchito man mano con altre funzioni. Per eventuali segnalazioni riguardanti malfunzionamenti o suggerimenti contattare l'assistenza di Fatture In Cloud. Si raccomanda inoltre di controllare periodicamente il CHANGELOG delle utime modifiche effettuate.</u> </p> <p>Il modello attuale prevede una richiesta di tipo POST, con i parametri codificati in formato JSON nel corpo della richiesta stessa. I formati dei parametri sono elencati nella tabella sottostante e variano a seconda della tipologia.</p> <h4>Formato dei parametri:</h4> <p> <table class=\"fullwidth\"> <thead><tr><th><b>Tipo</b></th><th>Descrizione</th><th>Esempio</th></tr></thead> <tbody class=\"operation-status\"> <tr><td><b>string</b></td><td>Stringa</td><td>\"stringa\"</td></tr> <tr><td><b>integer</b></td><td>Numero intero</td><td>\"123\" o 123</td></tr> <tr><td><b>double</b></td><td>Numero decimale</td><td>\"123.45\" o 123.45</td></tr> <tr><td><b>boolean</b></td><td>Variabile booleana</td><td>\"true\", true, \"false\" o false</td></tr> <tr><td><b>date</b></td><td>Data nel formato dd/MM/yyyy</td><td>\"01/01/2015\"</td></tr> <tr><td><b>date-time</b></td><td>Data nel formato dd/MM/yyyy HH:mm:ss</td><td>\"01/01/2015 12:34:53\"</td></tr> </tbody> </table> </p> <p> I parametri <code>api_uid</code> e <code>api_key</code> sono necessari per effettuare qualsiasi operazione (vedi la <a href=\"https://secure.fattureincloud.it/api\" target=\"_blank\">pagina principale delle API</a>) e vanno inseriti come parametri JSON in tutte le richieste. </p> <p> L'endpoint di riferimento si trova all'indirizzo <a href=\"#\">https://api.fattureincloud.it/v1</a>, per cui le richieste sono nel formato <a href=\"#\">https://api.fattureincloud.it/v1/richiesta/operazione</a>. </p> <p> L'esempio di richiesta generica contiene una lista dei codici di errore comuni a tutte le richieste, mentre eventuali altri errori specifici ad una funzione sono elencati nella sezione della funzione stessa. </p>  </p>

OpenAPI spec version: 0.9.14

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module FattureInCloud
  class AcquistiLight
    # Identificativo univoco del documento
    attr_accessor :id

    # Tipologia del documento
    attr_accessor :tipo

    # Identificativo univoco del fornitore (se nullo, il fornitore non è presente nell'anagrafica)
    attr_accessor :id_fornitore

    # Nome o ragione sociale del fornitore
    attr_accessor :nome

    # Descrizione dell'acquisto
    attr_accessor :descrizione

    # Importo netto del documento
    attr_accessor :importo_netto

    # Importo iva del documento
    attr_accessor :importo_iva

    # Importo lordo del documento
    attr_accessor :importo_totale

    # Valuta del documento e degli importi indicati
    attr_accessor :valuta

    # Tasso di cambio EUR/{valuta}
    attr_accessor :valuta_cambio

    # Link al file allegato al documento (presente solo se \"mostra_link_allegato\" vale \"true\" e l'allegato esiste) (\"file_allegato\" viene deprecato in favore di \"link_allegato\")
    attr_accessor :link_allegato

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'tipo' => :'tipo',
        :'id_fornitore' => :'id_fornitore',
        :'nome' => :'nome',
        :'descrizione' => :'descrizione',
        :'importo_netto' => :'importo_netto',
        :'importo_iva' => :'importo_iva',
        :'importo_totale' => :'importo_totale',
        :'valuta' => :'valuta',
        :'valuta_cambio' => :'valuta_cambio',
        :'link_allegato' => :'link_allegato'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'tipo' => :'String',
        :'id_fornitore' => :'String',
        :'nome' => :'String',
        :'descrizione' => :'String',
        :'importo_netto' => :'Float',
        :'importo_iva' => :'Float',
        :'importo_totale' => :'Float',
        :'valuta' => :'String',
        :'valuta_cambio' => :'Float',
        :'link_allegato' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = '0'
      end

      if attributes.has_key?(:'tipo')
        self.tipo = attributes[:'tipo']
      else
        self.tipo = 'spesa'
      end

      if attributes.has_key?(:'id_fornitore')
        self.id_fornitore = attributes[:'id_fornitore']
      else
        self.id_fornitore = '0'
      end

      if attributes.has_key?(:'nome')
        self.nome = attributes[:'nome']
      else
        self.nome = 'Mario Rossi'
      end

      if attributes.has_key?(:'descrizione')
        self.descrizione = attributes[:'descrizione']
      else
        self.descrizione = 'Licenza software ABC'
      end

      if attributes.has_key?(:'importo_netto')
        self.importo_netto = attributes[:'importo_netto']
      else
        self.importo_netto = 0.0
      end

      if attributes.has_key?(:'importo_iva')
        self.importo_iva = attributes[:'importo_iva']
      else
        self.importo_iva = 0.0
      end

      if attributes.has_key?(:'importo_totale')
        self.importo_totale = attributes[:'importo_totale']
      else
        self.importo_totale = 0.0
      end

      if attributes.has_key?(:'valuta')
        self.valuta = attributes[:'valuta']
      else
        self.valuta = 'EUR'
      end

      if attributes.has_key?(:'valuta_cambio')
        self.valuta_cambio = attributes[:'valuta_cambio']
      else
        self.valuta_cambio = 1.0
      end

      if attributes.has_key?(:'link_allegato')
        self.link_allegato = attributes[:'link_allegato']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @tipo.nil?
        invalid_properties.push('invalid value for "tipo", tipo cannot be nil.')
      end

      if @nome.nil?
        invalid_properties.push('invalid value for "nome", nome cannot be nil.')
      end

      if @descrizione.nil?
        invalid_properties.push('invalid value for "descrizione", descrizione cannot be nil.')
      end

      if @importo_netto.nil?
        invalid_properties.push('invalid value for "importo_netto", importo_netto cannot be nil.')
      end

      if @importo_iva.nil?
        invalid_properties.push('invalid value for "importo_iva", importo_iva cannot be nil.')
      end

      if @importo_totale.nil?
        invalid_properties.push('invalid value for "importo_totale", importo_totale cannot be nil.')
      end

      if @valuta.nil?
        invalid_properties.push('invalid value for "valuta", valuta cannot be nil.')
      end

      if @valuta_cambio.nil?
        invalid_properties.push('invalid value for "valuta_cambio", valuta_cambio cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @tipo.nil?
      tipo_validator = EnumAttributeValidator.new('String', ['spesa', 'ndc'])
      return false unless tipo_validator.valid?(@tipo)
      return false if @nome.nil?
      return false if @descrizione.nil?
      return false if @importo_netto.nil?
      return false if @importo_iva.nil?
      return false if @importo_totale.nil?
      return false if @valuta.nil?
      return false if @valuta_cambio.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tipo Object to be assigned
    def tipo=(tipo)
      validator = EnumAttributeValidator.new('String', ['spesa', 'ndc'])
      unless validator.valid?(tipo)
        fail ArgumentError, 'invalid value for "tipo", must be one of #{validator.allowable_values}.'
      end
      @tipo = tipo
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          tipo == o.tipo &&
          id_fornitore == o.id_fornitore &&
          nome == o.nome &&
          descrizione == o.descrizione &&
          importo_netto == o.importo_netto &&
          importo_iva == o.importo_iva &&
          importo_totale == o.importo_totale &&
          valuta == o.valuta &&
          valuta_cambio == o.valuta_cambio &&
          link_allegato == o.link_allegato
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, tipo, id_fornitore, nome, descrizione, importo_netto, importo_iva, importo_totale, valuta, valuta_cambio, link_allegato].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FattureInCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
