=begin
#Documentazione API e ambiente di test

#<p> <p> <u>ATTENZIONE: Il progetto attualmente è ancora in fase di sviluppo e verrà arricchito man mano con altre funzioni. Per eventuali segnalazioni riguardanti malfunzionamenti o suggerimenti contattare l'assistenza di Fatture In Cloud. Si raccomanda inoltre di controllare periodicamente il CHANGELOG delle utime modifiche effettuate.</u> </p> <p>Il modello attuale prevede una richiesta di tipo POST, con i parametri codificati in formato JSON nel corpo della richiesta stessa. I formati dei parametri sono elencati nella tabella sottostante e variano a seconda della tipologia.</p> <h4>Formato dei parametri:</h4> <p> <table class=\"fullwidth\"> <thead><tr><th><b>Tipo</b></th><th>Descrizione</th><th>Esempio</th></tr></thead> <tbody class=\"operation-status\"> <tr><td><b>string</b></td><td>Stringa</td><td>\"stringa\"</td></tr> <tr><td><b>integer</b></td><td>Numero intero</td><td>\"123\" o 123</td></tr> <tr><td><b>double</b></td><td>Numero decimale</td><td>\"123.45\" o 123.45</td></tr> <tr><td><b>boolean</b></td><td>Variabile booleana</td><td>\"true\", true, \"false\" o false</td></tr> <tr><td><b>date</b></td><td>Data nel formato dd/MM/yyyy</td><td>\"01/01/2015\"</td></tr> <tr><td><b>date-time</b></td><td>Data nel formato dd/MM/yyyy HH:mm:ss</td><td>\"01/01/2015 12:34:53\"</td></tr> </tbody> </table> </p> <p> I parametri <code>api_uid</code> e <code>api_key</code> sono necessari per effettuare qualsiasi operazione (vedi la <a href=\"https://secure.fattureincloud.it/api\" target=\"_blank\">pagina principale delle API</a>) e vanno inseriti come parametri JSON in tutte le richieste. </p> <p> L'endpoint di riferimento si trova all'indirizzo <a href=\"#\">https://api.fattureincloud.it/v1</a>, per cui le richieste sono nel formato <a href=\"#\">https://api.fattureincloud.it/v1/richiesta/operazione</a>. </p> <p> L'esempio di richiesta generica contiene una lista dei codici di errore comuni a tutte le richieste, mentre eventuali altri errori specifici ad una funzione sono elencati nella sezione della funzione stessa. </p>  </p>

OpenAPI spec version: 0.9.14

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module FattureInCloud
  class Prodotto
    # Identificativo univoco del prodotto
    attr_accessor :id

    # Codice prodotto
    attr_accessor :cod

    # Nome del prodotto
    attr_accessor :nome

    # Descrizione del prodotto
    attr_accessor :desc

    # Specifica se è registrato il prezzo comprensivo di iva (lordo) oppure non lo è (netto)
    attr_accessor :prezzo_ivato

    # Prezzo netto di vendita del prodotto (se prezzo_ivato=false)
    attr_accessor :prezzo_netto

    # Prezzo lordo di vendita del prodotto (se prezzo_ivato=true)
    attr_accessor :prezzo_lordo

    # Prezzo netto di acquisto del prodotto (opzionale)
    attr_accessor :costo

    # Valore IVA predefinito per il prodotto (il valore -1 indica che l'aliquota IVA viene ereditata dal cliente/fornitore)
    attr_accessor :valore_iva

    # Descrizione IVA predefinita
    attr_accessor :desc_iva

    # Unità di misura per il prodotto
    attr_accessor :um

    # Categoria del prodotto (utilizzata per il piano dei conti)
    attr_accessor :categoria

    # Note aggiuntive sul prodotto
    attr_accessor :note

    # [Solo con magazzino utilizzabile] Indica la gestione magazzino abilitata sul prodotto.
    attr_accessor :magazzino

    # [Solo con magazzino abilitato] Specifica la giacenza iniziale del prodotto all'interno del magazzino.
    attr_accessor :giacenza_iniziale

    # [Solo con magazzino abilitato] Specifica la giacenza attuale del prodotto all'interno del magazzino.
    attr_accessor :giacenza

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'cod' => :'cod',
        :'nome' => :'nome',
        :'desc' => :'desc',
        :'prezzo_ivato' => :'prezzo_ivato',
        :'prezzo_netto' => :'prezzo_netto',
        :'prezzo_lordo' => :'prezzo_lordo',
        :'costo' => :'costo',
        :'valore_iva' => :'valore_iva',
        :'desc_iva' => :'desc_iva',
        :'um' => :'um',
        :'categoria' => :'categoria',
        :'note' => :'note',
        :'magazzino' => :'magazzino',
        :'giacenza_iniziale' => :'giacenza_iniziale',
        :'giacenza' => :'giacenza'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'cod' => :'String',
        :'nome' => :'String',
        :'desc' => :'String',
        :'prezzo_ivato' => :'BOOLEAN',
        :'prezzo_netto' => :'Float',
        :'prezzo_lordo' => :'Float',
        :'costo' => :'Float',
        :'valore_iva' => :'Float',
        :'desc_iva' => :'String',
        :'um' => :'String',
        :'categoria' => :'String',
        :'note' => :'String',
        :'magazzino' => :'BOOLEAN',
        :'giacenza_iniziale' => :'Float',
        :'giacenza' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = '0'
      end

      if attributes.has_key?(:'cod')
        self.cod = attributes[:'cod']
      else
        self.cod = ''
      end

      if attributes.has_key?(:'nome')
        self.nome = attributes[:'nome']
      else
        self.nome = 'Prodotto esempio'
      end

      if attributes.has_key?(:'desc')
        self.desc = attributes[:'desc']
      else
        self.desc = ''
      end

      if attributes.has_key?(:'prezzo_ivato')
        self.prezzo_ivato = attributes[:'prezzo_ivato']
      else
        self.prezzo_ivato = false
      end

      if attributes.has_key?(:'prezzo_netto')
        self.prezzo_netto = attributes[:'prezzo_netto']
      else
        self.prezzo_netto = 0.0
      end

      if attributes.has_key?(:'prezzo_lordo')
        self.prezzo_lordo = attributes[:'prezzo_lordo']
      else
        self.prezzo_lordo = 0.0
      end

      if attributes.has_key?(:'costo')
        self.costo = attributes[:'costo']
      else
        self.costo = 0.0
      end

      if attributes.has_key?(:'valore_iva')
        self.valore_iva = attributes[:'valore_iva']
      else
        self.valore_iva = 22.0
      end

      if attributes.has_key?(:'desc_iva')
        self.desc_iva = attributes[:'desc_iva']
      else
        self.desc_iva = ''
      end

      if attributes.has_key?(:'um')
        self.um = attributes[:'um']
      else
        self.um = ''
      end

      if attributes.has_key?(:'categoria')
        self.categoria = attributes[:'categoria']
      else
        self.categoria = ''
      end

      if attributes.has_key?(:'note')
        self.note = attributes[:'note']
      else
        self.note = ''
      end

      if attributes.has_key?(:'magazzino')
        self.magazzino = attributes[:'magazzino']
      else
        self.magazzino = false
      end

      if attributes.has_key?(:'giacenza_iniziale')
        self.giacenza_iniziale = attributes[:'giacenza_iniziale']
      end

      if attributes.has_key?(:'giacenza')
        self.giacenza = attributes[:'giacenza']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @cod.nil?
        invalid_properties.push('invalid value for "cod", cod cannot be nil.')
      end

      if @nome.nil?
        invalid_properties.push('invalid value for "nome", nome cannot be nil.')
      end

      if @desc.nil?
        invalid_properties.push('invalid value for "desc", desc cannot be nil.')
      end

      if @prezzo_ivato.nil?
        invalid_properties.push('invalid value for "prezzo_ivato", prezzo_ivato cannot be nil.')
      end

      if @valore_iva.nil?
        invalid_properties.push('invalid value for "valore_iva", valore_iva cannot be nil.')
      end

      if @desc_iva.nil?
        invalid_properties.push('invalid value for "desc_iva", desc_iva cannot be nil.')
      end

      if @um.nil?
        invalid_properties.push('invalid value for "um", um cannot be nil.')
      end

      if @categoria.nil?
        invalid_properties.push('invalid value for "categoria", categoria cannot be nil.')
      end

      if @note.nil?
        invalid_properties.push('invalid value for "note", note cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @cod.nil?
      return false if @nome.nil?
      return false if @desc.nil?
      return false if @prezzo_ivato.nil?
      return false if @valore_iva.nil?
      return false if @desc_iva.nil?
      return false if @um.nil?
      return false if @categoria.nil?
      return false if @note.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          cod == o.cod &&
          nome == o.nome &&
          desc == o.desc &&
          prezzo_ivato == o.prezzo_ivato &&
          prezzo_netto == o.prezzo_netto &&
          prezzo_lordo == o.prezzo_lordo &&
          costo == o.costo &&
          valore_iva == o.valore_iva &&
          desc_iva == o.desc_iva &&
          um == o.um &&
          categoria == o.categoria &&
          note == o.note &&
          magazzino == o.magazzino &&
          giacenza_iniziale == o.giacenza_iniziale &&
          giacenza == o.giacenza
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, cod, nome, desc, prezzo_ivato, prezzo_netto, prezzo_lordo, costo, valore_iva, desc_iva, um, categoria, note, magazzino, giacenza_iniziale, giacenza].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FattureInCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
